import uvicorn
import os
import subprocess
import sys
from dotenv import load_dotenv

def check_port_usage():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç 8000"""
    try:
        result = subprocess.run("lsof -i :8000", shell=True, capture_output=True, text=True)
        if result.returncode == 0 and result.stdout.strip():
            print("‚ö†Ô∏è  –ü–æ—Ä—Ç 8000 –∑–∞–Ω—è—Ç!")
            print("   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:")
            for line in result.stdout.strip().split('\n')[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if line.strip():
                    print(f"   {line.strip()}")
            return True
        return False
    except Exception:
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    try:
        import numpy
        if numpy.__version__.startswith('2.'):
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è NumPy 2.x")
            print("   ChromaDB –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å NumPy 2.0+")
            print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 fix_dependencies.py")
            return False
        
        import six
        import dateutil
        return True
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 fix_dependencies.py")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ RAG API"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
    if check_port_usage():
        print("\n‚ùå –ü–æ—Ä—Ç 8000 –∑–∞–Ω—è—Ç. –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –ø–æ—Ä—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        print("   –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞:")
        print("   - lsof -i :8000  # –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å")
        print("   - kill -9 <PID>  # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = ["API_TOKEN"]  # –¢–æ–ª—å–∫–æ API_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI API –∫–ª—é—á —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenAI –¥–ª—è —ç–º–±–µ–¥–∏–Ω–≥–æ–≤
    embedding_type = os.getenv("EMBEDDING_TYPE", "openai").lower()
    if embedding_type == "openai" and not os.getenv("OPENAI_API_KEY"):
        required_vars.append("OPENAI_API_KEY")
    
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\n–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ example.env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.")
        return
    
    print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    print("\nüöÄ –ó–∞–ø—É—Å–∫ RAG API...")
    print("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    print("üîç OpenAPI —Å—Ö–µ–º–∞: http://localhost:8000/openapi.json")
    print("üíö Health check: http://localhost:8000/health")
    print("\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("-" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )

if __name__ == "__main__":
    main() 