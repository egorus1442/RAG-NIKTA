"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã RAG API
"""

import requests
import json
import os
from typing import Optional

class RAGAPIClient:
    def __init__(self, base_url: str = "http://localhost:8000", api_token: Optional[str] = None):
        self.base_url = base_url
        self.api_token = api_token or os.getenv("API_TOKEN")
        if not self.api_token:
            raise ValueError("API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.")
        
        self.headers = {
            "Authorization": f"Bearer {self.api_token}",
            "Content-Type": "application/json"
        }
    
    def health_check(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
        response = requests.get(f"{self.base_url}/health")
        return response.json()
    
    def upload_file(self, file_path: str) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        headers = {"Authorization": f"Bearer {self.api_token}"}
        
        with open(file_path, "rb") as f:
            files = {"file": f}
            response = requests.post(
                f"{self.base_url}/upload",
                headers=headers,
                files=files
            )
        
        if response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code} - {response.text}")
        
        return response.json()
    
    def query(self, question: str) -> dict:
        """–ó–∞–ø—Ä–æ—Å –∫ API"""
        data = {"question": question}
        response = requests.post(
            f"{self.base_url}/query",
            headers=self.headers,
            json=data
        )
        
        if response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code} - {response.text}")
        
        return response.json()
    
    def delete_file(self, file_id: str) -> dict:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        response = requests.delete(
            f"{self.base_url}/file/{file_id}",
            headers=self.headers
        )
        
        if response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
        
        return response.json()

def create_test_file(content: str, filename: str = "test_document.txt") -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    with open(filename, "w", encoding="utf-8") as f:
        f.write(content)
    return filename

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG API")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        client = RAGAPIClient()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ API
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API...")
        health = client.health_check()
        print(f"‚úÖ API —Å—Ç–∞—Ç—É—Å: {health}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...")
        test_content = """
        –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (–ò–ò) - —ç—Ç–æ –æ–±–ª–∞—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫, 
        –∫–æ—Ç–æ—Ä–∞—è –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏, 
        –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É—é—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. 
        
        –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–º –ò–ò –∏ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è 
        –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º —É—á–∏—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö 
        –±–µ–∑ —è–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, 
        –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—è–º–∏ –¥–ª—è 
        –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö.
        """
        
        test_file = create_test_file(test_content)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        print("\n3. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...")
        upload_result = client.upload_file(test_file)
        file_id = upload_result["file_id"]
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {upload_result}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
        print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        questions = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?",
            "–ö–∞–∫ —Å–≤—è–∑–∞–Ω—ã –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ò–ò?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
            "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ò–ò?"
        ]
        
        for i, question in enumerate(questions, 1):
            print(f"\n   –í–æ–ø—Ä–æ—Å {i}: {question}")
            try:
                result = client.query(question)
                print(f"   –û—Ç–≤–µ—Ç: {result['answer'][:100]}...")
                print(f"   –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(result['context_documents'])}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        print(f"\n5. –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_id}...")
        delete_result = client.delete_file(file_id)
        print(f"‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω: {delete_result}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        os.remove(test_file)
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {test_file}")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("1. API –∑–∞–ø—É—â–µ–Ω–æ (python main.py)")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (pip install -r requirements.txt)")
        print("3. –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env —Ñ–∞–π–ª)")
        print("4. API_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    main() 