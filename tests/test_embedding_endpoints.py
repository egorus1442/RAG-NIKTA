#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–º —ç–º–±–µ–¥–∏–Ω–≥–æ–≤
"""

import requests
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8000"
API_TOKEN = os.getenv("API_TOKEN", "rag_api_secret_token_2024")

def test_embedding_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–º —ç–º–±–µ–¥–∏–Ω–≥–æ–≤"""
    
    headers = {
        "Authorization": f"Bearer {API_TOKEN}",
        "Content-Type": "application/json"
    }
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–º —ç–º–±–µ–¥–∏–Ω–≥–æ–≤")
    print("=" * 70)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç–∏–ø–∞ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–ø–∞ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤...")
    try:
        response = requests.get(f"{BASE_URL}/embedding-type-status", headers=headers)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"   –û—Ç–≤–µ—Ç: {data}")
        else:
            print(f"   –û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # 2. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–º–±–µ–¥–∏–Ω–≥–∏
    print("\n2. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–º–±–µ–¥–∏–Ω–≥–∏...")
    try:
        payload = {"embedding_type": "local"}
        response = requests.post(f"{BASE_URL}/set-embedding-type", headers=headers, json=payload)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"   –û—Ç–≤–µ—Ç: {data}")
        else:
            print(f"   –û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è...")
    try:
        response = requests.get(f"{BASE_URL}/embedding-type-status", headers=headers)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"   –û—Ç–≤–µ—Ç: {data}")
        else:
            print(f"   –û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # 4. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ OpenAI
    print("\n4. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ OpenAI...")
    try:
        payload = {"embedding_type": "openai"}
        response = requests.post(f"{BASE_URL}/set-embedding-type", headers=headers, json=payload)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"   –û—Ç–≤–µ—Ç: {data}")
        else:
            print(f"   –û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø
    print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞...")
    try:
        payload = {"embedding_type": "unsupported"}
        response = requests.post(f"{BASE_URL}/set-embedding-type", headers=headers, json=payload)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 400:
            data = response.json()
            print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {data}")
        else:
            print(f"   –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.text}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    print("\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    try:
        payload = {"embedding_type": "local"}
        response = requests.post(f"{BASE_URL}/set-embedding-type", json=payload)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 403:
            print("   –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        else:
            print(f"   –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.text}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    print("\n" + "=" * 70)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_embedding_endpoints() 