"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import requests
import time
import os

def test_logging():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    base_url = "http://localhost:8000"
    api_token = "rag_api_secret_token_2024"
    headers = {
        "Authorization": f"Bearer {api_token}"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    try:
        health_response = requests.get(f"{base_url}/health")
        if health_response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python main.py")
        return
    
    # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_content = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."
    with open("test_logging.txt", "w", encoding="utf-8") as f:
        f.write(test_content)
    
    try:
        with open("test_logging.txt", "rb") as f:
            files = {"file": f}
            upload_response = requests.post(
                f"{base_url}/upload",
                headers=headers,
                files=files
            )
        
        if upload_response.status_code == 200:
            upload_data = upload_response.json()
            file_id = upload_data["file_id"]
            print(f"   ‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Å ID: {file_id}")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥ —Ñ–∞–π–ª
            if os.path.exists("rag_api.log"):
                with open("rag_api.log", "r", encoding="utf-8") as f:
                    log_content = f.read()
                    if "–§–ê–ô–õ –û–ë–†–ê–ë–û–¢–ê–ù" in log_content and file_id in log_content:
                        print("   ‚úÖ –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥ —Ñ–∞–π–ª–µ –Ω–∞–π–¥–µ–Ω–∞")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ LLM
                        if "–û–±—Ä–∞–±–æ—Ç–∞–Ω LLM:" in log_content:
                            print("   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ LLM –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∞–Ω–∞")
                        else:
                            print("   ‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ LLM –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    else:
                        print("   ‚ùå –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥ —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print("   ‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {upload_response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º:")
    
    try:
        query_data = {"question": "–ß—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ?"}
        query_response = requests.post(
            f"{base_url}/query",
            headers=headers,
            json=query_data
        )
        
        if query_response.status_code == 200:
            print("   ‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥ —Ñ–∞–π–ª
            if os.path.exists("rag_api.log"):
                with open("rag_api.log", "r", encoding="utf-8") as f:
                    log_content = f.read()
                    if "–ó–ê–ü–†–û–° –ü–û–õ–£–ß–ï–ù" in log_content:
                        print("   ‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω –≤ –ª–æ–≥")
                    if "–ù–ê–ô–î–ï–ù–´ –î–û–ö–£–ú–ï–ù–¢–´" in log_content:
                        print("   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∑–∞–ø–∏—Å–∞–Ω–∞")
                    if "–û–¢–í–ï–¢ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù" in log_content:
                        print("   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –∑–∞–ø–∏—Å–∞–Ω–∞")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {query_response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:")
    
    try:
        delete_response = requests.delete(
            f"{base_url}/file/{file_id}",
            headers=headers
        )
        
        if delete_response.status_code == 200:
            print("   ‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥ —Ñ–∞–π–ª
            if os.path.exists("rag_api.log"):
                with open("rag_api.log", "r", encoding="utf-8") as f:
                    log_content = f.read()
                    if "–£–î–ê–õ–ï–ù–ò–ï –§–ê–ô–õ–ê" in log_content:
                        print("   ‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ª–æ–≥")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {delete_response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞
    if os.path.exists("test_logging.txt"):
        os.remove("test_logging.txt")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python view_logs.py")
    print("üí° –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: python monitor_logs.py")

if __name__ == "__main__":
    test_logging() 