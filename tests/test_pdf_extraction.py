"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF
"""

import os
import sys
from utils.text_extractor import TextExtractor

def test_pdf_extraction(file_path: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF"""
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF: {file_path}")
    print("=" * 60)
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    try:
        # 1. –û–±—ã—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
        print("1Ô∏è‚É£ –û–±—ã—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞:")
        text = TextExtractor.extract_text(file_path)
        print(f"   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {len(text.split())}")
        print(f"   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {text[:200]}...")
        print()
        
        # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        print("2Ô∏è‚É£ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏:")
        text_data = TextExtractor.extract_text_with_metadata(file_path)
        metadata = text_data['metadata']
        print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {metadata.get('total_pages', 0)}")
        print(f"   –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {metadata.get('total_tables', 0)}")
        print(f"   –í—Å–µ–≥–æ —Å–ª–æ–≤: {metadata.get('total_words', 0)}")
        print(f"   –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {metadata.get('total_chars', 0)}")
        print()
        
        # 3. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
        print("3Ô∏è‚É£ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ:")
        structured_text = TextExtractor._extract_from_pdf_structured(file_path)
        print(f"   –î–ª–∏–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(structured_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤:")
        print(f"   {structured_text[:300]}...")
        print()
        
        # 4. –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞–Ω–∫–∏
        print("4Ô∏è‚É£ –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞–Ω–∫–∏:")
        
        # –û–±—ã—á–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
        chunks_normal = TextExtractor.chunk_text(text, chunk_size=1000, overlap=200)
        print(f"   –û–±—ã—á–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞: {len(chunks_normal)} —á–∞–Ω–∫–æ–≤")
        
        # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        chunks_pages = TextExtractor.chunk_by_pages(structured_text)
        print(f"   –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º: {len(chunks_pages)} —á–∞–Ω–∫–æ–≤")
        
        # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∞–±–∑–∞—Ü–∞–º
        chunks_paragraphs = TextExtractor.chunk_by_paragraphs(text, max_chunk_size=1000)
        print(f"   –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∞–±–∑–∞—Ü–∞–º: {len(chunks_paragraphs)} —á–∞–Ω–∫–æ–≤")
        print()
        
        # 5. –ü—Ä–∏–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤
        print("5Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤:")
        if chunks_pages:
            print(f"   –ü–µ—Ä–≤—ã–π —á–∞–Ω–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞):")
            print(f"   {chunks_pages[0][:200]}...")
            print()
        
        if chunks_paragraphs:
            print(f"   –ü–µ—Ä–≤—ã–π —á–∞–Ω–∫ (–∞–±–∑–∞—Ü):")
            print(f"   {chunks_paragraphs[0][:200]}...")
            print()
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 test_pdf_extraction.py <–ø—É—Ç—å_–∫_pdf_—Ñ–∞–π–ª—É>")
        print("–ü—Ä–∏–º–µ—Ä: python3 test_pdf_extraction.py uploads/document.pdf")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ PDF —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ uploads
        uploads_dir = "uploads"
        if os.path.exists(uploads_dir):
            pdf_files = [f for f in os.listdir(uploads_dir) if f.lower().endswith('.pdf')]
            if pdf_files:
                print(f"\n–ù–∞–π–¥–µ–Ω—ã PDF —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ {uploads_dir}:")
                for i, pdf_file in enumerate(pdf_files, 1):
                    print(f"   {i}. {pdf_file}")
                print(f"\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 test_pdf_extraction.py uploads/{pdf_files[0]}")
        return
    
    file_path = sys.argv[1]
    test_pdf_extraction(file_path)

if __name__ == "__main__":
    main() 