import subprocess
import sys
import os

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
            if result.stdout.strip():
                print(f"   {result.stdout.strip()}")
        else:
            print(f"‚ùå {description} - –æ—à–∏–±–∫–∞")
            if result.stderr.strip():
                print(f"   {result.stderr.strip()}")
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå {description} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def check_port_usage():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç 8000"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 8000...")
    try:
        result = subprocess.run("lsof -i :8000", shell=True, capture_output=True, text=True)
        if result.returncode == 0 and result.stdout.strip():
            print("‚ö†Ô∏è  –ü–æ—Ä—Ç 8000 –∑–∞–Ω—è—Ç!")
            print("   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:")
            for line in result.stdout.strip().split('\n')[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if line.strip():
                    print(f"   {line.strip()}")
            return True
        else:
            print("‚úÖ –ü–æ—Ä—Ç 8000 —Å–≤–æ–±–æ–¥–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞: {e}")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ RAG API")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞
    if not os.environ.get('VIRTUAL_ENV'):
        print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
        print("   –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å—Ä–µ–¥—É: source venv/bin/activate")
        return False
    
    print(f"‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞: {os.environ.get('VIRTUAL_ENV')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
    port_occupied = check_port_usage()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    success = True
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    success &= run_command("python3 -m pip install --upgrade pip", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –≤–µ—Ä—Å–∏—é NumPy
    success &= run_command("python3 -m pip install 'numpy<2.0'", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π –≤–µ—Ä—Å–∏–∏ NumPy")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º six
    success &= run_command("python3 -m pip install 'six>=1.17.0'", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ six")
    
    # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º python-dateutil
    success &= run_command("python3 -m pip install --force-reinstall 'python-dateutil>=2.9.0'", "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ python-dateutil")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt
    success &= run_command("python3 -m pip install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt")
    
    print("\n" + "=" * 50)
    
    if success:
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        
        if port_occupied:
            print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ—Ä—Ç 8000 –∑–∞–Ω—è—Ç!")
            print("   –î–ª—è –∑–∞–ø—É—Å–∫–∞ RAG API –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ –ø–æ—Ä—Ç 8000 –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—Ç –≤ run.py")
            print("   –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞:")
            print("   - lsof -i :8000  # –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å")
            print("   - kill -9 <PID>  # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å")
        else:
            print("‚úÖ –ü–æ—Ä—Ç 8000 —Å–≤–æ–±–æ–¥–µ–Ω - –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å RAG API")
        
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ RAG API –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   python3 run.py")
        
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 